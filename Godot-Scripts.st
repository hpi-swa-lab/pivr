GodotSpatial subclass: #GDSVRObject	instanceVariableNames: 'last controllerSpeed'	classVariableNames: ''	poolDictionaries: ''	category: 'Godot-Scripts'!!GDSVRObject methodsFor: 'behavior'!color: aColor	| mat |	mat := self meshInstance getSurfaceMaterialSurface: 0.	"col := GDColor newRgbR: aColor red g: aColor green b: aColor blue."	mat albedoColor: aColor.! !!GDSVRObject methodsFor: 'behavior'!getControllerSpeed	^ controllerSpeed ifNil: [0.0]! !!GDSVRObject methodsFor: 'behavior'!getControllerTilt	| spatial |	spatial := self getRightController.	^ spatial getRotation dotB: (GDVector3 newX: 0 y: 0 z: 1).! !!GDSVRObject methodsFor: 'behavior'!getRightController	^ self getNodePath: '/root/Main/test'	"'/root/EditorTest/Avater/FPController/RightHandController'"! !!GDSVRObject methodsFor: 'behavior'!meshInstance	^ self getNodePath: 'MeshInstance'! !!GDSVRObject methodsFor: 'behavior'!physicsProcess: delta		| spatial current |	spatial := self getRightController.		current := spatial getTranslation.	controllerSpeed := last ifNotNil: [(last - current) length] ifNil: [0.0].	last := current.! !!GDSVRObject methodsFor: 'behavior'!process: delta		! !!GDSVRObject methodsFor: 'behavior'!ready		^ nil! !!GDSVRObject methodsFor: 'behavior'!setSize: aNumber	self meshInstance scale: (GDVector3 newX: aNumber y: aNumber z: aNumber)! !!GDSVRObject methodsFor: 'behavior'!size	^ self meshInstance scale! !GDSVRObject subclass: #GDSPlanet	instanceVariableNames: 'speed'	classVariableNames: ''	poolDictionaries: ''	category: 'Godot-Scripts'!!GDSPlanet methodsFor: 'behavior'!distance: aNumber	self translation: (GDVector3 newX: aNumber y: 0 z: 0)! !!GDSPlanet methodsFor: 'behavior' stamp: 'sdf 8/29/2022 00:39'!mass	| x |	x := GDVector3 newX: 1 y: 0 z: 0.	^ (self scale dotB: x) * (self size dotB: x)! !!GDSPlanet methodsFor: 'behavior' stamp: 'sdf 8/29/2022 02:02'!process: delta	| newTranslation angle |	angle := 90 degreesToRadians.	newTranslation := self translation rotatedAxis: (GDVector3 newX: 0 y: 1 z: 0) phi: delta * speed * (self size dotB: self size).	self translation: newTranslation! !!GDSPlanet methodsFor: 'behavior' stamp: 'sdf 8/29/2022 00:44'!ready		self color: Color green.	self setSize: 0.1.	self setSpeed: 1.0.		self distance: 0.5.! !!GDSPlanet methodsFor: 'behavior'!setSpeed: aNumber	speed := aNumber.! !!GDSPlanet methodsFor: 'behavior'!speed	^ speed! !!GDSPlanet methodsFor: 'behavior'!speed: aNumber	speed := aNumber.! !GDSVRObject subclass: #GDSSolarSystem	instanceVariableNames: 'planets'	classVariableNames: ''	poolDictionaries: ''	category: 'Godot-Scripts'!!GDSSolarSystem methodsFor: 'behavior' stamp: 'sdf 8/29/2022 00:39'!process: delta	planets do: [:planet |		planet setSpeed: (self getControllerSpeed * 100 * planet mass).		planet setSize: (self getControllerTilt).]! !!GDSSolarSystem methodsFor: 'behavior' stamp: 'sdf 8/29/2022 02:02'!ready	| newPlanet |		planets := OrderedCollection new.	1 to: 5 do: [:i | | r |		newPlanet := (self getParent) createNewVRObject.		planets add: newPlanet.		self addChildNode: newPlanet.		newPlanet distance: i * 0.3.		newPlanet setSpeed: (1 to: 15) atRandom / 15.0.		r := ThreadSafeRandom next * 0.2 + 0.05.		newPlanet scale: (GDVector3 newX: r y: r z: r).]! !